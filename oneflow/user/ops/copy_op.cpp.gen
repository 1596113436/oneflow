#include "oneflow/core/framework/op_generated.h"

namespace oneflow {

/* static */ Maybe<void> CopyOp::InferLogicalTensorDesc(user_op::InferContext *ctx) {
      *ctx->OutputShape("out", 0) = ctx->InputShape("in", 0);
      *ctx->OutputIsDynamic("out", 0) = ctx->InputIsDynamic("in", 0);
      return Maybe<void>::Ok();
    }

/*static*/ Maybe<void> CopyOp::InferPhysicalTensorDesc(user_op::InferContext* ctx) {return InferLogicalTensorDesc(ctx);}

/* static */ Maybe<void> CopyOp::GetSbp(user_op::SbpContext *ctx) {
      const auto& inputs = ctx->inputs();
      CHECK_EQ_OR_RETURN(inputs.size(), 1);
      const auto& input =
          ctx->LogicalTensorDesc4InputArgNameAndIndex(inputs[0].first, inputs[0].second);
      for (int64_t axis = 0; axis < input.shape().NumAxes(); ++axis) {
        ctx->NewBuilder().Split(inputs, axis).Split(ctx->outputs(), axis).Build();
      }
      ctx->NewBuilder().PartialSum(inputs).PartialSum(ctx->outputs()).Build();
      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> CopyOp::InferDataType(user_op::InferContext *ctx) {
      *ctx->OutputDType("out", 0) = ctx->InputDType("in", 0);
      return Maybe<void>::Ok();
    }

/* static */ Maybe<Symbol<Device>> CopyOp::InferDevice(user_op::DeviceInferContext *ctx) {
return GetDeviceInferFn((ctx);
}

