#include "oneflow/core/framework/op_generated.h"

namespace oneflow {

/* static */ Maybe<void> DotOp::InferLogicalTensorDesc(user_op::InferContext *ctx) {
      const user_op::TensorDesc& x = ctx->InputTensorDesc("x", 0);
      const user_op::TensorDesc& y = ctx->InputTensorDesc("y", 0);
      CHECK_OR_RETURN(x.shape() == y.shape()) << "Input tensor shape is different";
      CHECK_OR_RETURN(x.shape().NumAxes() == 1) << "Input tensor is not 1D";
      *ctx->OutputShape("out", 0) = Shape({});
      return Maybe<void>::Ok();
    }

/*static*/ Maybe<void> DotOp::InferPhysicalTensorDesc(user_op::InferContext* ctx) {return InferLogicalTensorDesc(ctx);}

/* static */ Maybe<void> DotOp::GetSbp(user_op::SbpContext *ctx) {
      ctx->NewBuilder()
          .Split(user_op::OpArg("x", 0), 0)
          .Split(user_op::OpArg("y", 0), 0)
          .PartialSum(user_op::OpArg("out", 0))
          .Build();

      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> DotOp::InferDataType(user_op::InferContext *ctx) {
      const user_op::TensorDesc& x = ctx->InputTensorDesc("x", 0);
      const user_op::TensorDesc& y = ctx->InputTensorDesc("y", 0);
      CHECK_OR_RETURN(x.data_type() == y.data_type()) << "The input tensor type is different";
      *ctx->OutputDType("out", 0) = ctx->InputDType("x", 0);
      return Maybe<void>::Ok();
    }

