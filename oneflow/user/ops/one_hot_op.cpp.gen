#include "oneflow/core/framework/op_generated.h"

namespace oneflow {

/* static */ Maybe<void> OneHotOp::InferLogicalTensorDesc(user_op::InferContext *ctx) {
      const int64_t depth = ctx->Attr<int64_t>("depth");
      CHECK_GT_OR_RETURN(depth, 0);
      const user_op::TensorDesc& indices_desc = ctx->InputTensorDesc("indices", 0);
      CHECK_GT_OR_RETURN(indices_desc.shape().NumAxes(), 0);
      user_op::TensorDesc* out_desc = ctx->OutputTensorDesc("out", 0);
      *out_desc->mut_is_dynamic() = indices_desc.is_dynamic();
      DimVector dim_vec = indices_desc.shape().dim_vec();
      dim_vec.emplace_back(depth);
      *out_desc->mut_shape() = Shape(dim_vec);
      return Maybe<void>::Ok();
    }

/*static*/ Maybe<void> OneHotOp::InferPhysicalTensorDesc(user_op::InferContext* ctx) {return InferLogicalTensorDesc(ctx);}

/* static */ Maybe<void> OneHotOp::GetSbp(user_op::SbpContext *ctx) {
      const user_op::TensorDesc& indices_tensor =
          ctx->LogicalTensorDesc4InputArgNameAndIndex("indices", 0);
      FOR_RANGE(int64_t, i, 0, indices_tensor.shape().NumAxes()) {
        ctx->NewBuilder()
            .Split(user_op::OpArg("indices", 0), i)
            .Split(user_op::OpArg("out", 0), i)
            .Build();
      }

      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> OneHotOp::ModifyInputArg(GetInputArgModifier GetInputArgModifierFn, const user_op::UserOpConfWrapper &conf) {
      user_op::InputArgModifier* indices_modifier = GetInputArgModifierFn("indices", 0);
      CHECK_OR_RETURN(indices_modifier != nullptr);
      indices_modifier->set_requires_grad(false);
      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> OneHotOp::InferDataType(user_op::InferContext *ctx) {
      const user_op::TensorDesc& indices_desc = ctx->InputTensorDesc("indices", 0);
      CHECK_OR_RETURN(IsIndexDataType(indices_desc.data_type()));
      user_op::TensorDesc* out_desc = ctx->OutputTensorDesc("out", 0);
      DataType dtype = ctx->Attr<DataType>("dtype");
      *out_desc->mut_data_type() = dtype;
      return Maybe<void>::Ok();
    }

