#include "oneflow/core/framework/op_generated.h"

namespace oneflow {

/* static */ Maybe<void> ArgSortOp::InferLogicalTensorDesc(user_op::InferContext *ctx) {
      *ctx->OutputShape("out", 0) = ctx->InputShape("in", 0);
      return Maybe<void>::Ok();
    }

/*static*/ Maybe<void> ArgSortOp::InferPhysicalTensorDesc(user_op::InferContext* ctx) {return InferLogicalTensorDesc(ctx);}

/* static */ Maybe<void> ArgSortOp::GetSbp(user_op::SbpContext *ctx) {
      // The current implementation can only do arg_sort in the last dimension and should use
      // Broadcast (by default) instead of Split for that dimension
      const user_op::TensorDesc& in_tensor = ctx->LogicalTensorDesc4InputArgNameAndIndex("in", 0);
      FOR_RANGE(int64_t, i, 0, in_tensor.shape().NumAxes() - 1) {
        ctx->NewBuilder().Split(ctx->inputs(), i).Split(ctx->outputs(), i).Build();
      }
      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> ArgSortOp::CheckAttr(const user_op::UserOpDefWrapper &def, const user_op::UserOpConfWrapper &conf) {
      const std::string& direction = op_conf.attr<std::string>("direction");
      CHECK_OR_RETURN(direction == "ASCENDING" || direction == "DESCENDING");
      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> ArgSortOp::InferDataType(user_op::InferContext *ctx) {
      *ctx->OutputDType("out", 0) = DataType::kInt32;
      return Maybe<void>::Ok();
    }

