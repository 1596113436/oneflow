#include "oneflow/core/framework/op_generated.h"

namespace oneflow {

/* static */ Maybe<void> ImageBatchAlignOp::InferLogicalTensorDesc(user_op::InferContext *ctx) {
      const user_op::TensorDesc& in_desc = ctx->InputTensorDesc("in", 0);
      CHECK_OR_RETURN(in_desc.shape().NumAxes() == 1);
      const Shape& shape_attr = ctx->Attr<Shape>("shape");
      const bool dynamic_out = ctx->Attr<bool>("dynamic_out");
      DimVector dim_vec(shape_attr.NumAxes() + 1);
      dim_vec.at(0) = in_desc.shape().elem_cnt();
      FOR_RANGE(int64_t, i, 0, shape_attr.NumAxes()) { dim_vec.at(i + 1) = shape_attr.At(i); }
      user_op::TensorDesc* out_desc = ctx->OutputTensorDesc("out", 0);
      *out_desc->mut_shape() = Shape(dim_vec);
      out_desc->set_is_dynamic(dynamic_out);
      return Maybe<void>::Ok();
    }

/*static*/ Maybe<void> ImageBatchAlignOp::InferPhysicalTensorDesc(user_op::InferContext* ctx) {return InferLogicalTensorDesc(ctx);}

/* static */ Maybe<void> ImageBatchAlignOp::GetSbp(user_op::SbpContext *ctx) {
      ctx->NewBuilder().Split(ctx->inputs(), 0).Split(ctx->outputs(), 0).Build();
      return Maybe<void>::Ok();
    }

/* static */ "Maybe<void>" ImageBatchAlignOp::ModifyOutputArg(GetOutputArgModifier GetOutputArgModifierFn, const user_op::UserOpConfWrapper &conf) {
      user_op::OutputArgModifier* out_modifier = GetOutputArgModifierFn("out", 0);
      CHECK_OR_RETURN(out_modifier != nullptr);
      out_modifier->set_header_infered_before_compute(false);
      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> ImageBatchAlignOp::CheckAttr(const user_op::UserOpDefWrapper &def, const user_op::UserOpConfWrapper &conf) {
      bool check_failed = false;
      std::stringstream err;
      err << "Illegal attr value for " << conf.op_type_name() << " op, op_name: " << conf.op_name();
      const Shape& shape = conf.attr<Shape>("shape");
      if (shape.NumAxes() != 3) {
        err << ", shape: " << shape.ToString() << " (image shape must has 3 axes)";
        check_failed = true;
      }
      DataType data_type = conf.attr<DataType>("data_type");
      if (data_type != DataType::kUInt8 && data_type != DataType::kFloat) {
        err << ", data_type: " << data_type << " (only support kUInt8 and kFloat for now)";
        check_failed = true;
      }
      int32_t alignment = conf.attr<int32_t>("alignment");
      if (alignment < 0) {
        err << ", alignment: " << alignment << " (alignment must be greater than or equal to 0)";
        check_failed = true;
      } else if (alignment != 0 && !PowerOfTwo(alignment)) {
        err << ", alignment: " << alignment
            << " (alignment must be power of 2 when it's not equal to 0)";
        check_failed = true;
      }
      if (check_failed) { return oneflow::Error::CheckFailedError() << err.str(); }
      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> ImageBatchAlignOp::InferDataType(user_op::InferContext *ctx) {
      const user_op::TensorDesc& in_desc = ctx->InputTensorDesc("in", 0);
      CHECK_OR_RETURN(in_desc.data_type() == DataType::kTensorBuffer);
      user_op::TensorDesc* out_desc = ctx->OutputTensorDesc("out", 0);
      *out_desc->mut_data_type() = ctx->Attr<DataType>("data_type");
      return Maybe<void>::Ok();
    }

