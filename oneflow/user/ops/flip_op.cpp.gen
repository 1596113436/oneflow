#include "oneflow/core/framework/op_generated.h"

namespace oneflow {

/* static */ Maybe<void> FlipOp::InferLogicalTensorDesc(user_op::InferContext *ctx) {
      const user_op::TensorDesc& x_desc = ctx->InputTensorDesc("x", 0);
      const int input_dims = x_desc.shape().NumAxes();
      const std::vector<int32_t> dims = ctx->Attr<std::vector<int32_t>>("dims");
      CHECK_OR_RETURN(dims.size() <= input_dims)
          << "len of dims must less than len of input tensor";
      for (auto x : dims) { CHECK_OR_RETURN(x < input_dims) << "dims parameter is illegal."; }
      user_op::TensorDesc* y_desc = ctx->OutputTensorDesc("y", 0);
      *y_desc->mut_shape() = x_desc.shape();
      return Maybe<void>::Ok();
    }

/*static*/ Maybe<void> FlipOp::InferPhysicalTensorDesc(user_op::InferContext* ctx) {return InferLogicalTensorDesc(ctx);}

/* static */ Maybe<void> FlipOp::GetSbp(user_op::SbpContext *ctx) {
      ctx->NewBuilder().Split(user_op::OpArg("x", 0), 0).Split(user_op::OpArg("y", 0), 0).Build();
      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> FlipOp::InferDataType(user_op::InferContext *ctx) {
      *ctx->OutputDType("y", 0) = ctx->InputDType("x", 0);
      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> FlipGradOp::InferLogicalTensorDesc(user_op::InferContext *ctx) {
      const Shape& dy_shape = ctx->InputShape("dy", 0);
      Shape* dx_shape = ctx->OutputShape("dx", 0);
      *dx_shape = dy_shape;
      return Maybe<void>::Ok();
    }

/*static*/ Maybe<void> FlipGradOp::InferPhysicalTensorDesc(user_op::InferContext* ctx) {return InferLogicalTensorDesc(ctx);}

/* static */ Maybe<void> FlipGradOp::GetSbp(user_op::SbpContext *ctx) {
      ctx->NewBuilder().Split(user_op::OpArg("dy", 0), 0).Split(user_op::OpArg("dx", 0), 0).Build();
      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> FlipGradOp::InferDataType(user_op::InferContext *ctx) {
      *ctx->OutputDType("dx", 0) = ctx->InputDType("dy", 0);
      return Maybe<void>::Ok();
    }

