#include "oneflow/core/framework/op_generated.h"

namespace oneflow {

/* static */ Maybe<void> LogSoftmaxOp::InferLogicalTensorDesc(user_op::InferContext *ctx) {
      *ctx->OutputShape("prob", 0) = ctx->InputShape("in", 0);
      return Maybe<void>::Ok();
    }

/*static*/ Maybe<void> LogSoftmaxOp::InferPhysicalTensorDesc(user_op::InferContext* ctx) {return InferLogicalTensorDesc(ctx);}

/* static */ Maybe<void> LogSoftmaxOp::GetSbp(user_op::SbpContext *ctx) {
      const user_op::TensorDesc& in_tensor = ctx->LogicalTensorDesc4InputArgNameAndIndex("in", 0);
      FOR_RANGE(int64_t, axis, 0, in_tensor.shape().NumAxes() - 1) {
        ctx->NewBuilder()
            .Split(user_op::OpArg("in", 0), axis)
            .Split(user_op::OpArg("prob", 0), axis)
            .Build();
      }
      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> LogSoftmaxOp::InferDataType(user_op::InferContext *ctx) {
      *ctx->OutputDType("prob", 0) = ctx->InputDType("in", 0);
      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> LogSoftmaxGradOp::InferLogicalTensorDesc(user_op::InferContext *ctx) {
      const Shape& y_shape = ctx->InputShape("prob", 0);
      const Shape& dy_shape = ctx->InputShape("dy", 0);
      Shape* dx_shape = ctx->OutputShape("dx", 0);
      CHECK_OR_RETURN(dy_shape == y_shape);
      *dx_shape = dy_shape;
      return Maybe<void>::Ok();
    }

/*static*/ Maybe<void> LogSoftmaxGradOp::InferPhysicalTensorDesc(user_op::InferContext* ctx) {return InferLogicalTensorDesc(ctx);}

/* static */ Maybe<void> LogSoftmaxGradOp::GetSbp(user_op::SbpContext *ctx) {
      const user_op::TensorDesc& y_tensor = ctx->LogicalTensorDesc4InputArgNameAndIndex("prob", 0);
      FOR_RANGE(int64_t, axis, 0, y_tensor.shape().NumAxes() - 1) {
        ctx->NewBuilder()
            .Split(user_op::OpArg("prob", 0), axis)
            .Split(user_op::OpArg("dy", 0), axis)
            .Split(user_op::OpArg("dx", 0), axis)
            .Build();
      }
      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> LogSoftmaxGradOp::InferDataType(user_op::InferContext *ctx) {
      CHECK_EQ_OR_RETURN(ctx->InputDType("prob", 0), ctx->InputDType("dy", 0));
      *ctx->OutputDType("dx", 0) = ctx->InputDType("prob", 0);
      return Maybe<void>::Ok();
    }

