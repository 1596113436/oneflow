#include "oneflow/core/framework/op_generated.h"

namespace oneflow {

/* static */ Maybe<void> ExpandOp::InferLogicalTensorDesc(user_op::InferContext *ctx) {
      const Shape& input_shape = ctx->InputShape("in", 0);
      const std::vector<int32_t>& logical_expand_shape =
          ctx->Attr<std::vector<int32_t>>("logical_expand_shape");

      std::vector<int32_t> in_shape;
      in_shape.resize(input_shape.NumAxes());
      for (int i = 0; i < input_shape.NumAxes(); ++i) { in_shape[i] = input_shape.At(i); }

      std::vector<int32_t> out_shape;
      std::vector<int32_t> stride;
      CHECK_JUST(getOutShapeAndStrideForFp(in_shape, logical_expand_shape, out_shape, stride));

      Shape* output_shape = ctx->OutputShape("out", 0);
      DimVector dim_vec(out_shape.begin(), out_shape.end());
      *output_shape = Shape(dim_vec);

      return Maybe<void>::Ok();
    }

/*static*/ Maybe<void> ExpandOp::InferPhysicalTensorDesc(user_op::InferContext* ctx) {return InferLogicalTensorDesc(ctx);}

/* static */ Maybe<void> ExpandOp::GetSbp(user_op::SbpContext *ctx) {
      const std::vector<int32_t>& logical_in_shape =
          ctx->Attr<std::vector<int32_t>>("logical_in_shape");
      const std::vector<int32_t>& logical_expand_shape =
          ctx->Attr<std::vector<int32_t>>("logical_expand_shape");
      std::vector<int32_t> logical_out_shape;
      std::vector<int32_t> stride;
      CHECK_JUST(
          getOutShapeAndStride(logical_in_shape, logical_expand_shape, logical_out_shape, stride));

      int offset = logical_out_shape.size() - logical_in_shape.size();
      FOR_RANGE(int64_t, i, 0, logical_in_shape.size()) {
        if (logical_in_shape[i] == logical_out_shape[i + offset]) {
          ctx->NewBuilder()
              .Split(user_op::OpArg("in", 0), i)
              .Split(user_op::OpArg("out", 0), i + offset)
              .Build();
        }
      }

      ctx->NewBuilder()
          .PartialSum(user_op::OpArg("in", 0))
          .PartialSum(user_op::OpArg("out", 0))
          .Build();
      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> ExpandOp::InferDataType(user_op::InferContext *ctx) {
      *ctx->OutputDType("out", 0) = ctx->InputDType("in", 0);
      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> ExpandGradOp::InferLogicalTensorDesc(user_op::InferContext *ctx) {
      const Shape& input_shape = ctx->InputShape("in", 0);
      const std::vector<int32_t>& logical_out_shape =
          ctx->Attr<std::vector<int32_t>>("logical_out_shape");
      const std::vector<int32_t>& logical_expand_shape =
          ctx->Attr<std::vector<int32_t>>("logical_expand_shape");

      std::vector<int32_t> in_shape;
      in_shape.resize(input_shape.NumAxes());
      for (int i = 0; i < input_shape.NumAxes(); ++i) { in_shape[i] = input_shape.At(i); }
      std::vector<int32_t> out_shape;
      std::vector<int32_t> stride;
      CHECK_JUST(getOutShapeAndStrideForBp(logical_out_shape, logical_expand_shape, in_shape,
                                           out_shape, stride));

      Shape* output_shape = ctx->OutputShape("out", 0);
      DimVector dim_vec(out_shape.begin(), out_shape.end());
      *output_shape = Shape(dim_vec);
      return Maybe<void>::Ok();
    }

/*static*/ Maybe<void> ExpandGradOp::InferPhysicalTensorDesc(user_op::InferContext* ctx) {return InferLogicalTensorDesc(ctx);}

/* static */ Maybe<void> ExpandGradOp::GetSbp(user_op::SbpContext *ctx) {
      const user_op::TensorDesc& input_tensor =
          ctx->LogicalTensorDesc4InputArgNameAndIndex("in", 0);
      const std::vector<int32_t>& logical_out_shape =
          ctx->Attr<std::vector<int32_t>>("logical_out_shape");
      const std::vector<int32_t>& logical_expand_shape =
          ctx->Attr<std::vector<int32_t>>("logical_expand_shape");

      int offset = input_tensor.shape().NumAxes() - logical_out_shape.size();
      FOR_RANGE(int64_t, i, 0, logical_out_shape.size()) {
        if (logical_out_shape[i] == input_tensor.shape().At(i + offset)) {
          ctx->NewBuilder()
              .Split(user_op::OpArg("in", 0), i + offset)
              .Split(user_op::OpArg("out", 0), i)
              .Build();
        }
      }

      ctx->NewBuilder()
          .PartialSum(user_op::OpArg("in", 0))
          .PartialSum(user_op::OpArg("out", 0))
          .Build();
      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> ExpandGradOp::InferDataType(user_op::InferContext *ctx) {
      *ctx->OutputDType("out", 0) = ctx->InputDType("in", 0);
      return Maybe<void>::Ok();
    }

