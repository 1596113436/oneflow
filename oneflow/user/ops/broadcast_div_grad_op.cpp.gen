#include "oneflow/core/framework/op_generated.h"

namespace oneflow {

/* static */ Maybe<void> BroadcastDivGradOp::InferLogicalTensorDesc(user_op::InferContext *ctx) {
      *ctx->OutputShape("dy", 0) = ctx->InputShape("y", 0);
      *ctx->OutputIsDynamic("dy", 0) = ctx->InputIsDynamic("y", 0);
      return Maybe<void>::Ok();
    }

/*static*/ Maybe<void> BroadcastDivGradOp::InferPhysicalTensorDesc(user_op::InferContext* ctx) {return InferLogicalTensorDesc(ctx);}

/* static */ Maybe<void> BroadcastDivGradOp::GetSbp(user_op::SbpContext *ctx) {
      const Shape& y_shape = ctx->LogicalTensorDesc4InputArgNameAndIndex("y", 0).shape();
      const Shape& z_shape = ctx->LogicalTensorDesc4InputArgNameAndIndex("z", 0).shape();
      CHECK_LE_OR_RETURN(y_shape.NumAxes(), z_shape.NumAxes());
      FOR_RANGE(int64_t, i, 0, y_shape.NumAxes()) {
        const int64_t axis_y = y_shape.NumAxes() - 1 - i;
        const int64_t axis_z = z_shape.NumAxes() - 1 - i;
        if (y_shape.At(axis_y) == z_shape.At(axis_z)) {
          ctx->NewBuilder()
              .Split(user_op::OpArg("y", 0), axis_y)
              .Split(user_op::OpArg("z", 0), axis_z)
              .Split(user_op::OpArg("dz", 0), axis_z)
              .Split(user_op::OpArg("dy", 0), axis_y)
              .Build();
        } else {
          ctx->NewBuilder()
              .Broadcast(user_op::OpArg("y", 0))
              .Split(user_op::OpArg("z", 0), axis_z)
              .Split(user_op::OpArg("dz", 0), axis_z)
              .PartialSum(user_op::OpArg("dy", 0))
              .Build();
        }
      }
      ctx->NewBuilder()
          .Broadcast(user_op::OpArg("y", 0))
          .PartialSum(user_op::OpArg("z", 0))
          .Broadcast(user_op::OpArg("dz", 0))
          .Broadcast(user_op::OpArg("dy", 0))
          .Build();
      ctx->NewBuilder()
          .Broadcast(user_op::OpArg("y", 0))
          .Broadcast(user_op::OpArg("z", 0))
          .PartialSum(user_op::OpArg("dz", 0))
          .Broadcast(user_op::OpArg("dy", 0))
          .Build();
      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> BroadcastDivGradOp::InferDataType(user_op::InferContext *ctx) {
      *ctx->OutputDType("dy", 0) = ctx->InputDType("y", 0);
      return Maybe<void>::Ok();
    }

