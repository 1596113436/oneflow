#include "oneflow/core/framework/op_generated.h"

namespace oneflow {

/* static */ Maybe<void> TransposeOp::InferLogicalTensorDesc(user_op::InferContext *ctx) {
      const user_op::TensorDesc& in_tensor_desc = ctx->InputTensorDesc("input", 0);
      user_op::TensorDesc* out_tensor_desc = ctx->OutputTensorDesc("output", 0);
      const Shape& in_shape = in_tensor_desc.shape();
      Shape* out_shape = out_tensor_desc->mut_shape();
      const auto& perm = ctx->Attr<std::vector<int32_t>>("perm");
      CHECK_EQ_OR_RETURN(perm.size(), in_shape.NumAxes());
      CheckIsPerm(perm);
      // if (perm.at(0) != 0) { CHECK_OR_RETURN(!in_tensor_desc->is_dynamic()); }
      *out_tensor_desc->mut_shape() = in_tensor_desc.shape();
      *out_tensor_desc->mut_is_dynamic() = in_tensor_desc.is_dynamic();
      FOR_RANGE(size_t, i, 0, perm.size()) { out_shape->Set(i, in_shape.At(perm[i])); }
      return Maybe<void>::Ok();
    }

/*static*/ Maybe<void> TransposeOp::InferPhysicalTensorDesc(user_op::InferContext* ctx) {return InferLogicalTensorDesc(ctx);}

/* static */ Maybe<void> TransposeOp::GetSbp(user_op::SbpContext *ctx) {
      const user_op::TensorDesc& input_tensor =
          ctx->LogicalTensorDesc4InputArgNameAndIndex("input", 0);
      const auto& perm = ctx->Attr<std::vector<int32_t>>("perm");
      CHECK_EQ_OR_RETURN(perm.size(), input_tensor.shape().NumAxes());
      FOR_RANGE(int32_t, i, 0, perm.size()) {
        int32_t axis = perm.at(i);
        if (axis < 0) { axis += perm.size(); }
        CHECK_GE_OR_RETURN(axis, 0);
        CHECK_LT_OR_RETURN(axis, perm.size());
        ctx->NewBuilder().Split(ctx->inputs(), axis).Split(ctx->outputs(), i).Build();
      }
      ctx->NewBuilder().PartialSum(ctx->inputs()).PartialSum(ctx->outputs()).Build();
      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> TransposeOp::InferDataType(user_op::InferContext *ctx) {
      *ctx->OutputDType("output", 0) = ctx->InputDType("input", 0);
      return Maybe<void>::Ok();
    }

