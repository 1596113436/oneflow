#include "oneflow/core/framework/op_generated.h"

namespace oneflow {

/* static */ Maybe<void> ArgmaxOp::InferLogicalTensorDesc(user_op::InferContext *ctx) {
      auto dim_vec = ctx->InputShape("in", 0).dim_vec();
      dim_vec.pop_back();
      *ctx->OutputShape("out", 0) = Shape(std::move(dim_vec));
      return Maybe<void>::Ok();
    }

/*static*/ Maybe<void> ArgmaxOp::InferPhysicalTensorDesc(user_op::InferContext* ctx) {return InferLogicalTensorDesc(ctx);}

/* static */ Maybe<void> ArgmaxOp::GetSbp(user_op::SbpContext *ctx) {
      const user_op::TensorDesc& in_tensor = ctx->LogicalTensorDesc4InputArgNameAndIndex("in", 0);
      FOR_RANGE(int64_t, i, 0, in_tensor.shape().NumAxes() - 1) {
        ctx->NewBuilder().Split(ctx->inputs(), i).Split(ctx->outputs(), i).Build();
      }
      return Maybe<void>::Ok();
    }

/* static */ Maybe<void> ArgmaxOp::InferDataType(user_op::InferContext *ctx) {
      *ctx->OutputDType("out", 0) = DataType::kInt64;
      return Maybe<void>::Ok();
    }

