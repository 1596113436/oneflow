# Copyright 2020 The OneFlow Authors. All rights reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The following data types are allowed:
# {
#   "Tensor", "TensorTuple", "Scalar", "Int", "Int32", "Int64", "Float", "Double", "String", "Bool",
#   "ScalarList", "IntList", "Int32List", "Int64List", "FloatList", "DoubleList", "StringList", "BoolList"
# }

- name: "add_n"
  signature: "Tensor AddN(TensorTuple inputs)"
  bind_python: True

- name: "add"
  signature: "Tensor Add(Tensor x, Tensor y)"
  bind_python: True

- name: "add_scalar"
  signature: "Tensor ScalarAdd(Tensor x, *, Scalar alpha)"
  bind_python: True

- name: "add_scalar_by_tensor"
  signature: "Tensor ScalarAddByTensor(Tensor x, Tensor scalar)"
  bind_python: True

- name: "broadcast_add"
  signature: "Tensor BroadcastAdd(Tensor x, Tensor y)"
  bind_python: True

- name: "sub_scalar_by_tensor"
  signature: "Tensor ScalarSubByTensor(Tensor x, Tensor scalar)"
  bind_python: True

- name: "broadcast_sub"
  signature: "Tensor BroadcastSub(Tensor x, Tensor y)"
  bind_python: True

- name: "mul"
  signature: "Tensor Multiply(Tensor x, Tensor y)"
  bind_python: True

- name: "mul_scalar"
  signature: "Tensor ScalarMul(Tensor x, *, Scalar alpha)"
  bind_python: True

- name: "mul_scalar_by_tensor"
  signature: "Tensor ScalarMulByTensor(Tensor x, Tensor scalar)"
  bind_python: True

- name: "broadcast_mul"
  signature: "Tensor BroadcastMul(Tensor x, Tensor y)"
  bind_python: True

- name: "div_scalar_by_tensor"
  signature: "Tensor ScalarDivByTensor(Tensor x, Tensor scalar)"
  bind_python: True

- name: "broadcast_div"
  signature: "Tensor BroadcastDiv(Tensor x, Tensor y)"
  bind_python: True

- name: "pow"
  signature: "Tensor Pow(Tensor x, Tensor y)"
  bind_python: True

- name: "pow_scalar"
  signature: "Tensor ScalarPow(Tensor x, *, Scalar alpha)"
  bind_python: True

- name: "reduce_sum"
  signature: "Tensor ReduceSum(Tensor x, *, Int32List axis, Bool keepdims=False)"
  bind_python: True

- name: "transpose"
  signature: "Tensor Transpose(Tensor x, *, Int32List permute)"
  bind_python: True

- name: "reciprocal"
  signature: "Tensor Reciprocal(Tensor x)"
  bind_python: True

- name: "reciprocal_no_nan"
  signature: "Tensor ReciprocalNoNan(Tensor x)"
  bind_python: True

- name: "sin"
  signature: "Tensor Sin(Tensor x)"
  bind_python: True

- name: "cos"
  signature: "Tensor Cos(Tensor x)"
  bind_python: True

- name: "cosh"
  signature: "Tensor Cosh(Tensor x)"
  bind_python: True

- name: "log"
  signature: "Tensor Log(Tensor x)"
  bind_python: True

- name: "sqrt"
  signature: "Tensor Sqrt(Tensor x)"
  bind_python: True

- name: "rsqrt"
  signature: "Tensor Rsqrt(Tensor x)"
  bind_python: True

- name: "square"
  signature: "Tensor Square(Tensor x)"
  bind_python: True

- name: "relu"
  signature: "Tensor Relu(Tensor x)"
  bind_python: True

- name: "hardtanh"
  signature: "Tensor HardTanh(Tensor x, *, Double min_val, Double max_val)"
  bind_python: True

- name: "hardtanh_grad"
  signature: "Tensor HardTanhGrad(Tensor y, Tensor dy, *, Double min_val, Double max_val)"
  bind_python: False

- name: "tanh"
  signature: "Tensor Tanh(Tensor x)"
  bind_python: True

- name: "elu"
  signature: "Tensor Elu(Tensor x, *, Double alpha)"
  bind_python: True

- name: "elu_grad"
  signature: "Tensor EluGrad(Tensor x, Tensor dy, *, Double alpha)"
  bind_python: False

- name: "gelu"
  signature: "Tensor Gelu(Tensor x)"
  bind_python: True

- name: "sigmoid"
  signature: "Tensor Sigmoid(Tensor x)"
  bind_python: True

- name: "hardsigmoid"
  signature: "Tensor HardSigmoid(Tensor x)"
  bind_python: True

- name: "softmax"
  signature: "Tensor Softmax(Tensor x)"
  bind_python: True

- name: "hardswish"
  signature: "Tensor HardSwish(Tensor x)"
  bind_python: True

- name: "leaky_relu"
  signature: "Tensor LeakyRelu(Tensor x, *, Float alpha)"
  bind_python: True

- name: "leaky_relu_grad"
  signature: "Tensor LeakyReluGrad(Tensor x, Tensor dy, *, Float alpha)"
  bind_python: False

- name: "normalization"
  signature: "Tensor Normalization(Tensor x, Tensor moving_mean, Tensor moving_variance,
                                   Tensor gamma, Tensor beta, *, Int32 axis=1, Float epsilon=1e-5,
                                   Float momentum=0.9, Bool is_training=False)"
  bind_python: True

- name: "range"
  signature: "Tensor Range(*, Int64 start, Int64 limit, Int64 delta, DataType dtype=kInt64)"
  bind_python: True

- name: "flatten"
  signature: "Tensor Flatten(Tensor x, *, Int32 start_dim=0, Int32 end_dim=-1)"
  bind_python: True

- name: "argmax"
  signature: "Tensor ArgMax(Tensor x)"
  bind_python: True

- name: "argwhere"
  signature: "Tensor ArgWhere(Tensor x, *, DataType dtype=kInt32)"
  bind_python: True

- name: "broadcast_like"
  signature: "Tensor BroadcastLike(Tensor x, Tensor like, *, Int32List broadcast_axes)"
  bind_python: True
